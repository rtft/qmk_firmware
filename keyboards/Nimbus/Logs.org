#+TITLE:Logs

So this document is to hopefully help understand how qmk seems to work and to show what I did to get around certain things
It is structured into sections so you can look at whatever in a more organized way


* Code tips
** GREP
So the way I found a bug I made about transparency layers I used grep to see how others made their layouts for numpads
Grep being a tool to find text through files

So to find boards similar to ours I used a grep search on "layout_5x4" Since that is the dimensions of our numpads

#+begin_src sh : exports both
cd ..
grep -iR 5x4 .
#+end_src

#+RESULTS:

What this gives is a bunch of results of
** GIT
To get everything from here onto your computer all you need to do is to type these commands in the terminal

#+begin_src
git clone https://github.com/rtft/qmk_firmware
#+end_src

to get this project firmware.

Next is to add the upstream git, which is basically all the other stuff people are contributing to the repo

#+begin_src
git remote add -t master -m master upstream https://github.com/qmk/qmk_firmware
#+end_src


So all you need to do now to get all the new stuff is to run the following
#+begin_src
git fetch upstream
#+end_src

#+begin_src
git merge upstream
#+end_src

after which it will put you into some commit log probably in vim (and if it is vim just type :wq) to write and quit the editor after which you can

#+begin_src
git push
#+end_src

back to the repo

I don't really modify what qmk has so there should not be any merge conflicts, but if there is you should tell me.


* Nimbus Numpad
So to find the directory containing the numpad code. In the root directory of the QMK there is a symbolic link called "Nimbus" This is a symbolic link that takes you into the qmk_firmware/keyboards directory. Since there is like hundreds of keyboards in there, I thought it would make it slightly easier to visit. And I think the Nimbus stuff has to be in that directory for qmk to recognize it, but I am not sure.



So the current structure of the Nimbus folder looks like this. and I will try to explain what each file does.
#+begin_src sh :exports both
tree
#+end_src

#+RESULTS:
| .   |              |         |            |
| ├── | config.h     |         |            |
| ├── | info.json    |         |            |
| ├── | keymaps      |         |            |
| │   | └──          | default |            |
| │   |              | ├──     | config.h   |
| │   |              | ├──     | glcdfont.c |
| │   |              | ├──     | keymap.c   |
| ├── | Logs.org     |         |            |
| ├── | Nimbus.c     |         |            |
| ├── | Nimbus.h     |         |            |
| ├── | readme.md    |         |            |
| └── | rules.mk     |         |            |
|     |              |         |            |
| 2   | directories, | 10      | files      |

Basically the 2 most important files in here are config.h and keymap.c in the keymaps/default/ directory

** Logs.org
This is the file you are reading which has logs pertaining to what I have been doing and explanations for each file

** readme.md
Is our readme file, which after seeing a few other peoples would be good to have a picture of stuff explaining the layout of everything and what not.
but I have a basic thing there for now

** rules.mk
This has all of the I guess "rules" associated with the keyboard. where the bootloader settings and microcontroller are set, you should also check if I got those right as well.


** info.json
this file is what is used on http://www.keyboard-layout-editor.com/ and does not affect the compile or code in anyway.... At least im pretty sure lol, I have a basic numpad layout for this one

*** Sidenote:
I actually tried placing the numpad layout thing in there, and it don't work... but it doesn't really affect the code in any way (I have seen some projects that just leave this blank) so im just gonna leave that there for now

** config.h
Is a pretty important file that contains all the information related to pins, so Matrix and Column pins are stated here. As well as encoders and LED breathing and levels, RGB, and USB device descriptor.

Carter I think you should take a look at this file first to make sure I did everything here right because I don't really know much about electricity and everything you did here lol

** Nimbus.c
This is if we want extra customizations. There is commented code here that explains some of the functions here. Such as doing a specific thing at boot, and other things such as running during a matrix scan, and LED setting such as capslock or a macro looking thing.


** Nimbus.h
The header file associated, contains the layout for the numpad which is made to look like this
  .-------------------.
  |NLCK|   /|   *|   -|
  |-------------------|
  |   7|   8|   9|    |
  |--------------|    |
  |   4|   5|   6|   +|
  |-------------------|
  |   1|   2|   3|    |
  |--------------|    |
  |        0|   .| Ent|
  '-------------------'
  And I hope I got that right



** keymaps
The folder that contains the different keymaps, but so far it only contains one, and probably will only contain one for simplicity
*** default
This folder contains the file that has all the good stuff for the numpad.
**** keymap.c

File contains pretty much the layout and the stuff that controls the OLED and Encoder
https://docs.qmk.fm/#/keycodes
This link will be pretty useful for finding out what does what.

Also the layers stuff can be turned into an array if we want more layers.
***** Keycode and Layers
So this is where all the stuff gets matched to have input, there can be multiple layers if we wanted something with a WASD sort of deal. if you want to make another layer
just continue from the "," and make a name such as Layout2() and write out all the keycodes.

It is good to note that "_______" Means transparency, and will use whatever is above that layer.
****** In case it breaks note:
I am pretty sure the current layout works, but if it doesn't I did see another persons numpad look like this
#+begin_src
        KC_NLCK, KC_PSLS, KC_PAST, KC_PMNS,
        KC_P7,   KC_P8,   KC_P9,   KC_PPLS,
        KC_P4,   KC_P5,   KC_P6,   KC_PPLS,
        KC_P1,   KC_P2,   KC_P3,   KC_ENT,
        KC_P0,   KC_P0,   KC_PDOT, KC_ENT
#+end_src
so maybe we try that idk.
***** Encoder
Currently don't have much done with the encoder. Just have it set to raise and lower volume
https://beta.docs.qmk.fm/using-qmk/hardware-features/feature_encoders
Documentation is here if you would like to change it.


***** OLED
https://beta.docs.qmk.fm/using-qmk/hardware-features/displays/feature_oled_driver
Right now it is missing a LOGO and some other stuff, I do have it display when numlock is pressed and that is about it.
Also using a special font for it, and that is glcdfont.c where this is refered to by the config.h in the same directory

OLED rotation specifies what direction it is in, so horizontal is 0 which is what I have it as
**** config.h
used for the font for the OLED screen
**** glcdfont.c
a hex representation of the font

* Todo list
** TODO OLED [0/3] [0%]
- [ ] OLED logo
- [ ] Layer display
- [ ] Extra menu stuff
** TODO Encoder [0/2] [0%]
- [ ] Functions
- [ ] Layer functional changes
** TODO Layer  [0/1] [0%]
- [ ] Make some more I guess


* Work log
** (time stamp this in org-mode later)
Added more debug related stuff, and output related to encoder for testing.

#+begin_src

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  // If console is enabled, it will print the matrix position and status of each key pressed
#ifdef CONSOLE_ENABLE
    uprintf("KL: kc: %u, col: %u, row: %u, pressed: %u\n", keycode, record->event.key.col, record->event.key.row, record->event.pressed);
#endif
  return true;
}

#+end_src

Added this block of code to check for keypresses.
**

* DFU and linux udev rules
https://docs.qmk.fm/#/faq_build?id=linux-udev-rules
Good link related to if it says "No device present", but it still didn't fix my problem
